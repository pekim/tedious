diff --git a/README.md b/README.md
index de7ed9a..79b988e 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,6 @@
 # Tedious (node implementation of TDS)
-[![Dependency Status](https://david-dm.org/tediousjs/tedious.svg)](https://david-dm.org/tediousjs/tedious) [![NPM version](https://badge.fury.io/js/tedious.svg)](http://badge.fury.io/js/tedious) [![Build Status](https://secure.travis-ci.org/tediousjs/tedious.svg)](http://travis-ci.org/tediousjs/tedious) [![Build Status](https://ci.appveyor.com/api/projects/status/ike3p58hljpyffrl?svg=true)](https://ci.appveyor.com/project/tediousjs/tedious) [![Slack Status](https://tediousjs-slack.herokuapp.com/badge.svg)](https://tediousjs-slack.herokuapp.com/)[![Code Coverage](https://codecov.io/gh/tediousjs/tedious/badge.svg)](https://codecov.io/gh/tediousjs/tedious)
+[![Dependency Status](https://david-dm.org/tediousjs/tedious.svg)](https://david-dm.org/tediousjs/tedious) [![NPM version](https://badge.fury.io/js/tedious.svg)](http://badge.fury.io/js/tedious) [![Build Status](https://secure.travis-ci.org/tediousjs/tedious.svg)](http://travis-ci.org/tediousjs/tedious) [![Build Status](https://ci.appveyor.com/api/projects/status/ike3p58hljpyffrl?svg=true)](https://ci.appveyor.com/project/tediousjs/tedious) [![Slack Status](https://tediousjs-slack.herokuapp.com/badge.svg)](https://tediousjs-slack.herokuapp.com/)
+
 
 Tedious is a pure-Javascript implementation of the [TDS protocol](http://msdn.microsoft.com/en-us/library/dd304523.aspx),
 which is used to interact with instances of Microsoft's SQL Server. It is intended to be a fairly slim implementation of the protocol, with not too much additional functionality.
diff --git a/src/connection.js b/src/connection.js
index 232aedd..c67860b 100644
--- a/src/connection.js
+++ b/src/connection.js
@@ -27,6 +27,7 @@ const RequestError = require('./errors').RequestError;
 const Connector = require('./connector').Connector;
 const libraryName = require('./library').name;
 const versions = require('./tds-versions').versions;
+const colMetaDatParser = require('./token/colmetadata-token-parser');
 
 const { createNTLMRequest } = require('./ntlm');
 
@@ -858,7 +859,21 @@ class Connection extends EventEmitter {
           } else {
             columns = token.columns;
           }
-          request.emit('columnMetadata', columns);
+
+          // Replace variable length data-type to specific data-type (e.g., type intN -> type smallint etc...)
+          const emittedColumns = [];
+          if (Array.isArray(columns)) {
+            columns.forEach((column) => {
+              emittedColumns.push(colMetaDatParser.specifyDataType(column));
+            });
+          } else {
+            Object.keys(columns).forEach((colName) => {
+              const tempCol = columns[colName];
+              emittedColumns.push(colMetaDatParser.specifyDataType(tempCol));
+            });
+          }
+
+          request.emit('columnMetadata', emittedColumns);
         }
       } else {
         this.emit('error', new Error("Received 'columnMetadata' when no sqlRequest is in progress"));
@@ -1889,7 +1904,7 @@ Connection.prototype.STATE = {
       this.cleanupConnection(this.cleanupTypeEnum.REDIRECT);
     },
     events: {
-      message: function() {},
+      message: function() { },
       socketError: function() {
         this.transitionTo(this.STATE.FINAL);
       },
@@ -1908,7 +1923,7 @@ Connection.prototype.STATE = {
       this.cleanupConnection(this.cleanupTypeEnum.RETRY);
     },
     events: {
-      message: function() {},
+      message: function() { },
       socketError: function() {
         this.transitionTo(this.STATE.FINAL);
       },
diff --git a/src/data-types/bitn.js b/src/data-types/bitn.js
index 7d2cf46..bcc96ea 100644
--- a/src/data-types/bitn.js
+++ b/src/data-types/bitn.js
@@ -2,5 +2,11 @@ module.exports = {
   id: 0x68,
   type: 'BITN',
   name: 'BitN',
-  dataLengthLength: 1
+  dataLengthLength: 1,
+
+  getDataType: function(dataLength) {
+    const bit = require('./bit');
+
+    return (dataLength === 1) ? bit : this;
+  }
 };
diff --git a/src/data-types/datetimen.js b/src/data-types/datetimen.js
index 93d7ff0..5ebcecb 100644
--- a/src/data-types/datetimen.js
+++ b/src/data-types/datetimen.js
@@ -2,5 +2,20 @@ module.exports = {
   id: 0x6F,
   type: 'DATETIMN',
   name: 'DateTimeN',
-  dataLengthLength: 1
+  dataLengthLength: 1,
+
+  getDataType: function(dataLength) {
+    const smalldatetime = require('./smalldatetime');
+    const datetime = require('./datetime');
+
+    switch (dataLength) {
+      case 4:
+        return smalldatetime;
+
+      case 8:
+        return datetime;
+
+      default: return this;
+    }
+  }
 };
diff --git a/src/data-types/decimaln.js b/src/data-types/decimaln.js
index 3ef6d1a..b84ed32 100644
--- a/src/data-types/decimaln.js
+++ b/src/data-types/decimaln.js
@@ -4,5 +4,11 @@ module.exports = {
   name: 'DecimalN',
   dataLengthLength: 1,
   hasPrecision: true,
-  hasScale: true
+  hasScale: true,
+
+  getDataType: function(dataLength) {
+    const decimal = require('./decimal');
+
+    return (dataLength === 17) ? decimal : this;
+  }
 };
diff --git a/src/data-types/floatn.js b/src/data-types/floatn.js
index 3531161..9653c90 100644
--- a/src/data-types/floatn.js
+++ b/src/data-types/floatn.js
@@ -2,5 +2,11 @@ module.exports = {
   id: 0x6D,
   type: 'FLTN',
   name: 'FloatN',
-  dataLengthLength: 1
+  dataLengthLength: 1,
+
+  getDataType: function(dataLength) {
+    const float = require('./float');
+
+    return (dataLength === 4 || dataLength === 8) ? float : this;
+  }
 };
diff --git a/src/data-types/intn.js b/src/data-types/intn.js
index 5e0866d..7509dbb 100644
--- a/src/data-types/intn.js
+++ b/src/data-types/intn.js
@@ -2,5 +2,28 @@ module.exports = {
   id: 0x26,
   type: 'INTN',
   name: 'IntN',
-  dataLengthLength: 1
+  dataLengthLength: 1,
+
+  getDataType: function(dataLength) {
+    const tinyInt = require('./tinyint');
+    const smallInt = require('./smallint');
+    const int = require('./int');
+    const bigInt = require('./bigint');
+
+    switch (dataLength) {
+      case 1:
+        return tinyInt;
+
+      case 2:
+        return smallInt;
+
+      case 4:
+        return int;
+
+      case 8:
+        return bigInt;
+
+      default: return this;
+    }
+  }
 };
diff --git a/src/data-types/moneyn.js b/src/data-types/moneyn.js
index 2354a87..8a763ea 100644
--- a/src/data-types/moneyn.js
+++ b/src/data-types/moneyn.js
@@ -2,5 +2,20 @@ module.exports = {
   id: 0x6E,
   type: 'MONEYN',
   name: 'MoneyN',
-  dataLengthLength: 1
+  dataLengthLength: 1,
+
+  getDataType: function(dataLength) {
+    const smallmoney = require('./smallmoney');
+    const money = require('./money');
+
+    switch (dataLength) {
+      case 4:
+        return smallmoney;
+
+      case 8:
+        return money;
+
+      default: return this;
+    }
+  }
 };
diff --git a/src/data-types/numericn.js b/src/data-types/numericn.js
index 2cce7dc..0b203c7 100644
--- a/src/data-types/numericn.js
+++ b/src/data-types/numericn.js
@@ -4,5 +4,11 @@ module.exports = {
   name: 'NumericN',
   dataLengthLength: 1,
   hasPrecision: true,
-  hasScale: true
+  hasScale: true,
+
+  getDataType: function(dataLength) {
+    const numeric = require('./numeric');
+
+    return (dataLength === 17) ? numeric : this;
+  }
 };
diff --git a/src/token/colmetadata-token-parser.js b/src/token/colmetadata-token-parser.js
index 4d8d7b2..896a1e9 100644
--- a/src/token/colmetadata-token-parser.js
+++ b/src/token/colmetadata-token-parser.js
@@ -68,7 +68,7 @@ function readColumn(parser, options, index, callback) {
   });
 }
 
-module.exports = function(parser, colMetadata, options, callback) {
+exports.colMetaDataParser = function(parser, colMetadata, options, callback) {
   parser.readUInt16LE((columnCount) => {
     const columns = [];
 
@@ -95,3 +95,20 @@ module.exports = function(parser, colMetadata, options, callback) {
     });
   });
 };
+
+exports.specifyDataType = function(column) {
+  const dataLength = column.dataLength;
+  const originalType = column.type;
+  let type;
+
+  if (originalType.hasOwnProperty('getDataType')) {
+    type = originalType.getDataType(dataLength);
+  } else {
+    type = originalType;
+  }
+
+  return {
+    ...column,
+    type
+  };
+};
diff --git a/src/token/stream-parser.js b/src/token/stream-parser.js
index 4661115..eba1d18 100644
--- a/src/token/stream-parser.js
+++ b/src/token/stream-parser.js
@@ -2,7 +2,7 @@ const Transform = require('readable-stream').Transform;
 const TYPE = require('./token').TYPE;
 
 const tokenParsers = {};
-tokenParsers[TYPE.COLMETADATA] = require('./colmetadata-token-parser');
+tokenParsers[TYPE.COLMETADATA] = require('./colmetadata-token-parser').colMetaDataParser;
 tokenParsers[TYPE.DONE] = require('./done-token-parser').doneParser;
 tokenParsers[TYPE.DONEINPROC] = require('./done-token-parser').doneInProcParser;
 tokenParsers[TYPE.DONEPROC] = require('./done-token-parser').doneProcParser;
diff --git a/test/unit/data-type.js b/test/unit/data-type.js
index 37e0bde..9629681 100644
--- a/test/unit/data-type.js
+++ b/test/unit/data-type.js
@@ -15,7 +15,7 @@ describe('Data Types', function() {
       const buffer = new WritableTrackingBuffer(8);
       const parameter = { value: testSet[0] };
       const expectedNoOfDays = testSet[1];
-      type.writeParameterData(buffer, parameter, { useUTC: false }, () => {});
+      type.writeParameterData(buffer, parameter, { useUTC: false }, () => { });
       assert.strictEqual(buffer.buffer.readUInt16LE(1), expectedNoOfDays);
     }
   });
@@ -31,7 +31,7 @@ describe('Data Types', function() {
       const buffer = new WritableTrackingBuffer(16);
       const parameter = { value: testSet[0] };
       const expectedNoOfDays = testSet[1];
-      type.writeParameterData(buffer, parameter, { useUTC: false }, () => {});
+      type.writeParameterData(buffer, parameter, { useUTC: false }, () => { });
       assert.strictEqual(buffer.buffer.readInt32LE(1), expectedNoOfDays);
     }
   });
@@ -45,7 +45,7 @@ describe('Data Types', function() {
       [new Date(2015, 5, 20, 0, 0, 0), Buffer.from('06000000183a0b', 'hex')]
     ]) {
       const buffer = new WritableTrackingBuffer(16);
-      type.writeParameterData(buffer, { value: value, scale: 0 }, { useUTC: false }, () => {});
+      type.writeParameterData(buffer, { value: value, scale: 0 }, { useUTC: false }, () => { });
       assert.deepEqual(buffer.data, expectedBuffer);
     }
   });
@@ -59,7 +59,7 @@ describe('Data Types', function() {
       [new Date(2015, 5, 20, 0, 0, 0), Buffer.from('03183a0b', 'hex')]
     ]) {
       const buffer = new WritableTrackingBuffer(16);
-      type.writeParameterData(buffer, { value: value }, { useUTC: false }, () => {});
+      type.writeParameterData(buffer, { value: value }, { useUTC: false }, () => { });
       assert.deepEqual(buffer.data, expectedBuffer);
     }
   });
@@ -76,7 +76,7 @@ describe('Data Types', function() {
       parameter.value.nanosecondDelta = nanosecondDelta;
 
       const buffer = new WritableTrackingBuffer(16);
-      type.writeParameterData(buffer, parameter, { useUTC: false }, () => {});
+      type.writeParameterData(buffer, parameter, { useUTC: false }, () => { });
       assert.deepEqual(buffer.data, expectedBuffer);
     }
   });
diff --git a/test/unit/token/colmetadata-token-parser-test.js b/test/unit/token/colmetadata-token-parser-test.js
index 64416a9..ac36606 100644
--- a/test/unit/token/colmetadata-token-parser-test.js
+++ b/test/unit/token/colmetadata-token-parser-test.js
@@ -1,10 +1,19 @@
+const colmetadataTokenParser = require('../../../lib/token/colmetadata-token-parser');
 const dataTypeByName = require('../../../src/data-type').typeByName;
 const WritableTrackingBuffer = require('../../../src/tracking-buffer/writable-tracking-buffer');
 const TokenStreamParser = require('../../../src/token/stream-parser');
 const assert = require('chai').assert;
 
-describe('Colmetadata Token Parser', () => {
-  it('should int', () => {
+const intN = require('../../../lib/data-types/intn');
+const moneyN = require('../../../lib/data-types/moneyn');
+const dateTimeN = require('../../../lib/data-types/datetimen');
+const floatN = require('../../../lib/data-types/floatn');
+const bitN = require('../../../lib/data-types/bitn');
+const numericN = require('../../../lib/data-types/numericn');
+const decimalN = require('../../../lib/data-types/decimaln');
+
+describe('Colmetadata Token Parser', function() {
+  it('should int', function() {
     const numberOfColumns = 1;
     const userType = 2;
     const flags = 3;
@@ -33,7 +42,7 @@ describe('Colmetadata Token Parser', () => {
     assert.strictEqual(token.columns[0].colName, 'name');
   });
 
-  it('should varchar', () => {
+  it('should varchar', function() {
     const numberOfColumns = 1;
     const userType = 2;
     const flags = 3;
@@ -71,4 +80,72 @@ describe('Colmetadata Token Parser', () => {
     assert.strictEqual(token.columns[0].colName, 'name');
     assert.strictEqual(token.columns[0].dataLength, length);
   });
+
+  describe('should specify data type', function() {
+    it('should return correct intN type', function() {
+      const intNCol1 = { type: intN, dataLength: 1 };
+      const intCol1 = colmetadataTokenParser.specifyDataType(intNCol1);
+      assert.strictEqual(intCol1.type.id, 48);
+
+      const intNCol2 = { type: intN, dataLength: 2 };
+      const intCol2 = colmetadataTokenParser.specifyDataType(intNCol2);
+      assert.strictEqual(intCol2.type.id, 52);
+
+      const intNCol4 = { type: intN, dataLength: 4 };
+      const intCol4 = colmetadataTokenParser.specifyDataType(intNCol4);
+      assert.strictEqual(intCol4.type.id, 56);
+
+      const intNCol8 = { type: intN, dataLength: 8 };
+      const intCol8 = colmetadataTokenParser.specifyDataType(intNCol8);
+      assert.strictEqual(intCol8.type.id, 127);
+    });
+
+    it('should return correct moneyN data type', function() {
+      const moneyNCol4 = { type: moneyN, dataLength: 4 };
+      const moneyCol4 = colmetadataTokenParser.specifyDataType(moneyNCol4);
+      assert.strictEqual(moneyCol4.type.id, 122);
+
+      const moneyNCol8 = { type: moneyN, dataLength: 8 };
+      const moneyCol8 = colmetadataTokenParser.specifyDataType(moneyNCol8);
+      assert.strictEqual(moneyCol8.type.id, 60);
+    });
+
+    it('should return correct dateTimeN data type', function() {
+      const dateTimeNCol4 = { type: dateTimeN, dataLength: 4 };
+      const dateTimeCol4 = colmetadataTokenParser.specifyDataType(dateTimeNCol4);
+      assert.strictEqual(dateTimeCol4.type.id, 58);
+
+      const dateTimeNCol8 = { type: dateTimeN, dataLength: 8 };
+      const dateTimeCol8 = colmetadataTokenParser.specifyDataType(dateTimeNCol8);
+      assert.strictEqual(dateTimeCol8.type.id, 61);
+    });
+
+    it('should return correct floatN data type', function() {
+      const floatNCol4 = { type: floatN, dataLength: 4 };
+      const floatCol4 = colmetadataTokenParser.specifyDataType(floatNCol4);
+      assert.strictEqual(floatCol4.type.id, 62);
+
+      const floatNCol8 = { type: floatN, dataLength: 8 };
+      const floatCol8 = colmetadataTokenParser.specifyDataType(floatNCol8);
+      assert.strictEqual(floatCol8.type.id, 62);
+    });
+
+    it('should return correct BitN data type', function() {
+      const bitNCol4 = { type: bitN, dataLength: 1 };
+      const bitCol4 = colmetadataTokenParser.specifyDataType(bitNCol4);
+      assert.strictEqual(bitCol4.type.id, 50);
+    });
+
+    it('should return correct NumericN data type', function() {
+      const numericNCol1 = { type: numericN, dataLength: 17 };
+      const numericCol1 = colmetadataTokenParser.specifyDataType(numericNCol1);
+      assert.strictEqual(numericCol1.type.id, 63);
+    });
+
+    it('should return correct DecimalN data type', function() {
+      const decimalNCol1 = { type: decimalN, dataLength: 17 };
+      const decimalCol1 = colmetadataTokenParser.specifyDataType(decimalNCol1);
+      assert.strictEqual(decimalCol1.type.id, 55);
+    });
+  });
 });
