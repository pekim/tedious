name: Node CI

on:
  push:
    branches: [ "master", "alpha", "beta", "*.x" ]

  pull_request:
    branches: [ "master", "alpha", "beta", "*.x" ]

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Use Node.js 14
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm ci
    - run: npm run lint

    - name: Prepare Commitlint (pull_request)
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "TRAVIS_PULL_REQUEST_SLUG=${{ github.event.pull_request.head.repo.full_name }}" >> $GITHUB_ENV
        echo "TRAVIS_COMMIT_RANGE=HEAD~..HEAD" >> $GITHUB_ENV

    - name: Prepare Commitlint (push)
      if: ${{ github.event_name == 'push' }}
      run:  |
        echo "TRAVIS_PULL_REQUEST_SLUG=" >> $GITHUB_ENV
        echo "TRAVIS_COMMIT_RANGE=${{ github.event.before }}..${{ github.event.after }}" >> $GITHUB_ENV

    - run: npx commitlint-travis
      env:
        TRAVIS: "true"
        CI: "true"
        TRAVIS_EVENT_TYPE: "${{ github.event_name }}"
        TRAVIS_REPO_SLUG: "${{ github.repository }}"
        TRAVIS_COMMIT: "${{ github.sha }}"

  test:
    name: SQL Server Linux / Node.js ${{ matrix.node-version }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Generate TLS Certificate
      run: |
        openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' -keyout ./test/fixtures/localhost.key -out ./test/fixtures/localhost.crt

    - name: Start containers
      run: |
        docker-compose -f "test/docker-compose.linux.yml" up --detach

    - name: Set up CI configuration
      run: |
        mkdir ~/.tedious

        echo '{
          "config": {
            "server": "localhost",
            "authentication": {
              "type": "default",
              "options": {
                "userName": "sa",
                "password": "yourStrong(!)Password"
              }
            },
            "options": {
              "port": 1433,
              "database": "master",
              "encrypt": true
            }
          }
        }' | jq --arg certificate "$(cat ./test/fixtures/localhost.crt)" '.config.options.cryptoCredentialsDetails.ca |= $certificate' > ~/.tedious/test-connection.json

    - name: Upgrade npm
      run: npm install -g npm
      if: ${{ matrix.node-version == '6.x' }}

    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm ci

    - name: run unit tests
      run: npx nyc --reporter=lcov npm run test

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.4)
      env:
        TEDIOUS_TDS_VERSION: 7_4
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.3B)
      env:
        TEDIOUS_TDS_VERSION: 7_3_B
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.3A)
      env:
        TEDIOUS_TDS_VERSION: 7_3_A
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.2)
      env:
        TEDIOUS_TDS_VERSION: 7_2
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.1)
      env:
        TEDIOUS_TDS_VERSION: 7_1
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  test-windows:
    name: SQL Server Windows / Node.js ${{ matrix.node-version }}

    runs-on: windows-2022

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
      fail-fast: false

    steps:
    - name: Install a SQL Server 2022
      shell: pwsh
      run: |
        Push-Location C:\temp

        Invoke-WebRequest -Uri https://download.microsoft.com/download/3/8/d/38de7036-2433-4207-8eae-06e247e17b25/SQLServer2022-DEV-x64-ENU.exe -OutFile sqlsetup.exe
        Invoke-WebRequest -Uri https://download.microsoft.com/download/3/8/d/38de7036-2433-4207-8eae-06e247e17b25/SQLServer2022-DEV-x64-ENU.box -OutFile sqlsetup.box

        Start-Process -Wait -FilePath ./sqlsetup.exe -ArgumentList /qs, /x:setup

        .\setup\setup.exe /q /ACTION=Install /INSTANCENAME=MSSQLSERVER /FEATURES=SQLEngine /UPDATEENABLED=0 /SQLSVCACCOUNT='NT SERVICE\MSSQLSERVER' /SQLSYSADMINACCOUNTS='BUILTIN\ADMINISTRATORS' /TCPENABLED=1 /NPENABLED=0 /IACCEPTSQLSERVERLICENSETERMS /SQLCOLLATION=SQL_Latin1_General_CP1_CI_AS /USESQLRECOMMENDEDMEMORYLIMITS

        Set-ItemProperty -path "HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQLSERVER\" -Name LoginMode -Value 2
        Restart-Service MSSQLSERVER

        sqlcmd -S localhost -q "ALTER LOGIN [sa] WITH PASSWORD=N'yourStrong(!)Password'"
        sqlcmd -S localhost -q "ALTER LOGIN [sa] ENABLE"

        Pop-Location

    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dbatools
      run: Install-Module dbatools

    - name: Set up TLS Key and Certificate
      run: |
        Import-Module dbatools

        $certificate = New-SelfSignedCertificate `
          -Type SSLServerAuthentication `
          -Subject "CN=$env:COMPUTERNAME" -FriendlyName 'SQL Server RSA2048 G1' `
          -DnsName "$env:COMPUTERNAME",'localhost.' `
          -KeyAlgorithm 'RSA' -KeyLength 2048 -Hash 'SHA256' `
          -TextExtension '2.5.29.37={text}1.3.6.1.5.5.7.3.1' `
          -NotAfter (Get-Date).AddMonths(36) `
          -KeyExportPolicy NonExportable -KeySpec KeyExchange `
          -Provider 'Microsoft RSA SChannel Cryptographic Provider' `
          -CertStoreLocation Cert:\LocalMachine\My `

        $sqlinstance = Find-DbaInstance -ComputerName localhost
        $sqlinstance | Set-DbaNetworkCertificate -Thumbprint ($certificate.Thumbprint).ToUpper()

        Restart-Service MSSQLSERVER

        # Convert UA certificate raw data to Base64
        $output = @(
        '-----BEGIN CERTIFICATE-----'
        [System.Convert]::ToBase64String($certificate.RawData, 1)
        '-----END CERTIFICATE-----'
        )
        # Output PEM file to the path
        $output | Out-File -FilePath test\fixtures\localhost.crt -Encoding ascii

    - name: Set up CI configuration
      run: |
        mkdir ~/.tedious

        echo '{
          "config": {
            "server": "localhost",
            "authentication": {
              "type": "default",
              "options": {
                "userName": "sa",
                "password": "yourStrong(!)Password"
              }
            },
            "options": {
              "port": 1433,
              "database": "master",
              "trustServerCertificate": true
            }
          }
        }' | jq --arg certificate "$(cat ./test/fixtures/localhost.crt)" '.config.options.cryptoCredentialsDetails.ca |= $certificate' > ~/.tedious/test-connection.json

    - name: Upgrade npm
      run: npm install -g npm
      if: ${{ matrix.node-version == '6.x' }}

    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm ci

    - name: run unit tests
      run: npx nyc --reporter=lcov npm run test

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.4)
      env:
        TEDIOUS_TDS_VERSION: 7_4
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.3B)
      env:
        TEDIOUS_TDS_VERSION: 7_3_B
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.3A)
      env:
        TEDIOUS_TDS_VERSION: 7_3_A
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.2)
      env:
        TEDIOUS_TDS_VERSION: 7_2
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: run integration tests (TDS 7.1)
      env:
        TEDIOUS_TDS_VERSION: 7_1
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  azure-sql-auth:
    name: Azure SQL Server / Node.js 14.x
    runs-on: ubuntu-latest

    # Only run these tests if we have access to the secrets
    if: ${{ github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name }}

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 14
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - run: npm ci

    - run: mkdir ~/.tedious

    - name: Set up CI configuration (SQL Authentication)
      run: |
        echo '{
          "config": {
            "server": "${{ secrets.AZURE_SERVER }}",
            "authentication": {
              "type": "default",
              "options": {
                "userName": "${{ secrets.AZURE_USERNAME }}",
                "password": "${{ secrets.AZURE_PASSWORD }}"
              }
            },
            "options": {
              "port": 1433,
              "database": "tedious"
            }
          }
        }' > ~/.tedious/test-connection.json
    - name: run integration tests
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  azure-ad-auth:
    name: Azure SQL Server / Node.js 14.x
    runs-on: ubuntu-latest

    # Only run these tests if we have access to the secrets
    if: ${{ github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name }}

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 14
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm ci

    - run: mkdir ~/.tedious

    - name: Set up CI configuration (AD Authentication)
      run: |
        echo '{
          "config": {
            "server": "${{ secrets.AZURE_SERVER }}",
            "authentication": {
              "type": "azure-active-directory-password",
              "options": {
                "clientId": "${{ secrets.AZURE_AD_SP_CLIENT_ID }}",
                "tenantId": "${{ secrets.AZURE_AD_TENANT_ID }}",
                "userName": "${{ secrets.AZURE_AD_USERNAME }}",
                "password": "${{ secrets.AZURE_AD_PASSWORD }}"
              }
            },
            "options": {
              "port": 1433,
              "database": "tedious"
            }
          }
        }' > ~/.tedious/test-connection.json

    - name: run integration tests
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  azure-ad-service-principal-auth:
    name: Azure SQL Server / Node.js 14.x
    runs-on: ubuntu-latest

    # Only run these tests if we have access to the secrets
    if: ${{ github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name }}

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 14
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm ci

    - run: mkdir ~/.tedious

    - name: Set up CI configuration (AD Service Principal Authentication)
      run: |
        echo '{
          "config": {
            "server": "${{ secrets.AZURE_SERVER }}",
            "authentication": {
              "type": "azure-active-directory-service-principal-secret",
              "options": {
                "clientId": "${{ secrets.AZURE_AD_SP_CLIENT_ID }}",
                "tenantId": "${{ secrets.AZURE_AD_SP_TENANT_ID }}",
                "clientSecret": "${{ secrets.AZURE_AD_SP_CLIENT_SECRET }}"
              }
            },
            "options": {
              "port": 1433,
              "database": "tedious"
            }
          }
        }' > ~/.tedious/test-connection.json

    - name: run integration tests
      run: npx nyc --reporter=lcov npm run test-integration

    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  pre-release:
    name: Pre-Release
    needs: [test, azure-sql-auth, azure-ad-auth, azure-ad-service-principal-auth]
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 14
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm ci

    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm run semantic-release
